
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="spyne.timezone", ConfigurationName="ServiceReference1.Application")]
    public interface Application
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="country_to_timezone", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.country_to_timezoneResponse1> country_to_timezoneAsync(ServiceReference1.country_to_timezone1 request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="spyne.timezone")]
    public partial class country_to_timezone
    {
        
        private string countryField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public string country
        {
            get
            {
                return this.countryField;
            }
            set
            {
                this.countryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="spyne.timezone")]
    public partial class country_to_timezoneResponse
    {
        
        private string country_to_timezoneResultField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public string country_to_timezoneResult
        {
            get
            {
                return this.country_to_timezoneResultField;
            }
            set
            {
                this.country_to_timezoneResultField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class country_to_timezone1
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="spyne.timezone", Order=0)]
        public ServiceReference1.country_to_timezone country_to_timezone;
        
        public country_to_timezone1()
        {
        }
        
        public country_to_timezone1(ServiceReference1.country_to_timezone country_to_timezone)
        {
            this.country_to_timezone = country_to_timezone;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class country_to_timezoneResponse1
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="spyne.timezone", Order=0)]
        public ServiceReference1.country_to_timezoneResponse country_to_timezoneResponse;
        
        public country_to_timezoneResponse1()
        {
        }
        
        public country_to_timezoneResponse1(ServiceReference1.country_to_timezoneResponse country_to_timezoneResponse)
        {
            this.country_to_timezoneResponse = country_to_timezoneResponse;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface ApplicationChannel : ServiceReference1.Application, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class ApplicationClient : System.ServiceModel.ClientBase<ServiceReference1.Application>, ServiceReference1.Application
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ApplicationClient() : 
                base(ApplicationClient.GetDefaultBinding(), ApplicationClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.Application.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationClient(EndpointConfiguration endpointConfiguration) : 
                base(ApplicationClient.GetBindingForEndpoint(endpointConfiguration), ApplicationClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ApplicationClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ApplicationClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.country_to_timezoneResponse1> ServiceReference1.Application.country_to_timezoneAsync(ServiceReference1.country_to_timezone1 request)
        {
            return base.Channel.country_to_timezoneAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.country_to_timezoneResponse1> country_to_timezoneAsync(ServiceReference1.country_to_timezone country_to_timezone)
        {
            ServiceReference1.country_to_timezone1 inValue = new ServiceReference1.country_to_timezone1();
            inValue.country_to_timezone = country_to_timezone;
            return ((ServiceReference1.Application)(this)).country_to_timezoneAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.Application))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.Application))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ApplicationClient.GetBindingForEndpoint(EndpointConfiguration.Application);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ApplicationClient.GetEndpointAddress(EndpointConfiguration.Application);
        }
        
        public enum EndpointConfiguration
        {
            
            Application,
        }
    }
}
